

- name: Create task definition
  ecs_taskdefinition:
    family: "{{ cluster_name }}-taskdef"
    task_role_arn: "{{ ecs_role.arn }}"
    execution_role_arn: "{{ ecs_role.arn }}"
    containers:
    - name: "web_app"
      essential: true
      image: "{{ fe_ecr_repo.repository.repositoryUri }}:{{ fe_source_image_tag }}"
      portMappings:
      - containerPort: 5000
        hostPort:      5000
      environment:
      - name: "AWS_ACCESS_KEY_ID"
        value: "{{ wg_app_user_AWS_ACCESS_KEY_ID }}"
      - name: "AWS_SECRET_ACCESS_KEY"
        value: "{{ wg_app_user_AWS_SECRET_ACCESS_KEY }}"
      - name: "WG_S3BUCKET_NAME"
        value: "{{ s3bucket_name }}"
      - name: "WG_CITY_COUNT_LIMIT"
        value: "{{ lookup('env', 'WG_CITY_COUNT_LIMIT') }}"
      - name: "WG_CONFIG_PATH"
        value: "config/wg_config.json.gz"
      - name: "WG_DATABASE_ENDPOINT"
        value: "{{mysql_instance_facts.instance.endpoint}}" 
      - name: "WG_DATABASE_PORT"
        value: "{{mysql_instance_facts.instance.port}}"
      - name: "WG_DATABASE_USER"
        value: "{{ lookup('env', 'WG_DATABASE_USER') }}"
      - name: "WG_DATABASE_PASS"
        value: "{{ lookup('env', 'WG_DATABASE_PASS') }}"
      - name: "WG_DATABASE_NAME"
        value: "{{ db_database_name }}"
      - name: "WG_LOCAL_DATA_STORE"
        value: "app/data"
      logConfiguration:
        logDriver: awslogs
        options:
          awslogs-group: "{{ cluster_name }}"
          awslogs-region: "{{ cloud_config.region }}"
          awslogs-stream-prefix: "{{ cluster_name }}-containers"
    launch_type: FARGATE
    cpu: 256
    memory: 512
    state: present
    region: "{{ cloud_config.region }}"
    network_mode: awsvpc

- name: Create an ECS service
  ecs_service:
    state: present
    name: "{{ cluster_name }}"
    cluster: "{{ cluster_name }}"
    task_definition: "{{ cluster_name }}-taskdef"
    launch_type: FARGATE
#    load_balancers:
#      - targetGroupArn: "{{ elb_target_group_facts.target_groups[0]['target_group_arn'] }}"
#        containerName: "scalable_app"
#        containerPort: 5000
    network_configuration:
      assign_public_ip: yes
      subnets:
      - "{{ cluster_subnet.results[0]['subnet']['id'] }}" # public
#      - "{{ cluster_subnet.results[1]['subnet']['id'] }}"
#      - "{{ cluster_subnet.results[2]['subnet']['id'] }}"
      security_groups:
      - "{{ http_security_group.security_groups[0]['group_id'] }}"
    desired_count: "{{ size_of_cluster }}"
    region: "{{ cloud_config.region }}"
    deployment_configuration:
      minimum_healthy_percent: 75
      maximum_percent: 150
